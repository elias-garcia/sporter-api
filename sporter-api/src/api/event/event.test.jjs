/* jshint expr: true */
const chai = require('chai');
const chaiHttp = require('chai-http');
const app = require('../../app');
const test = require('../../util/test');
const appConfig = require('../../config/app.config');
const Sport = require('../sport/sport.model');
const User = require('../user/user.model');
const Event = require('./event.model');
const expect = chai.expect;
const apiPath = appConfig.path;

chai.use(chaiHttp);

let sport, user, event;
const nonExistingEventId = '58ffc747a0033611f1f783a7';

describe('Events', () => {

  beforeEach((done) => {
    sport = test.createSport();
    user = test.createUser();

    Event.remove({ }, () => {
      User.remove({ }, () => {
        Sport.remove({ });
      });
    });

    Sport.create(sport, (err, sport) => {
      User.create(user, (err, user) => {
        event = test.createEvent('New Event', 'Av. Felipe II, S/N, 28009 Madrid',
          '2017-05-28T18:00:00Z', '2017-05-28T19:00:00Z', 'New event description',
          user._id, sport._id);
        Event.create(event);
        done();
      });
    });
  });

  describe('GET /events', () => {

    it('should return 200 when searching all events', (done) => {
      chai.request(app)
        .get(`${apiPath}/events`)
        .set('content-type', 'application/json')
        .end((err, res) => {
          expect(res).to.be.json;
          expect(res).to.have.status(200);
          expect(res.body.data.events.length).to.be.equal(1);
          expect(res.body.data.events[0]).to.have.all.keys(
            ['_id', 'name', 'location', 'sport', 'start_date', 'ending_date',
            'description', 'intensity', 'paid', 'status', 'host', 'players',
            'created_at', 'updated_at']);
          done();
        });
    });

  });

  describe('POST /events', () => {

    it('should return 200, id and event info', (done) => {
      chai.request(app)
        .post(`${apiPath}/events`)
        .send(user)
        .end((err, res) => {
          expect(res).to.be.json;
          expect(res).to.have.status(200);
          expect(res.body.data.session).to.have.all.keys(
            ['name', 'location', 'sport', 'start_date', 'ending_date',
            'description', 'intensity', 'paid', 'status', 'host', 'players']);
          done();
        });
    });

  });

});